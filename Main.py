exec("""\n#! /usr/bin/env python3\n#\n# Copyright (C) idoneam (2016-2020)\n#\n# This file is part of Canary\n#\n# Canary is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Canary is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Canary. If not, see <https://www.gnu.org/licenses/>.\n\n# discord-py requirements\nimport discord\n\n# Other utilities\nimport os\nimport sys\nimport subprocess\nfrom datetime import datetime\nfrom pytz import timezone\nfrom bot import bot\n\nfrom cogs.utils.checks import is_developer, is_moderator\n\n# List the extensions (modules) that should be loaded on startup.\nstartup = [\n    "cogs.currency",\n    "cogs.games",\n    "cogs.helpers",\n    "cogs.images",\n    "cogs.info",\n    "cogs.memes",\n    "cogs.mod",\n    "cogs.quotes",\n    "cogs.reminder",\n    "cogs.roles",\n    "cogs.score",\n    "cogs.subscribers",\n]\n\n# TODO: SHOULD BE DB\nMARTY_RESPONSES = {\n    "dammit marty":\n    ":c",\n    "worm":\n    "walk without rhythm, and it won't attract the worm.",\n    "hey":\n    "whats going on?",\n    "this is so sad, marty play despacito":\n    "`Now playing:` https://www.youtube.com/watch?v=kJQP7kiw5Fk"\n}\n\n\n@bot.event\nasync def on_ready():\n    if bot.config.dev_log_webhook_id and bot.config.dev_log_webhook_token:\n        webhook_string = " and to the log webhook"\n    else:\n        webhook_string = ""\n    sys.stdout.write(f'Bot is ready, program output will be written to a '\n                     f'log file{webhook_string}.\\n')\n    sys.stdout.flush()\n    bot.dev_logger.info(f'Logged in as {bot.user.name} ({bot.user.id})')\n\n\n@bot.command()\n@is_moderator()\nasync def load(ctx, extension_name: str):\n    \"\"\"\n    Load a specific extension. Specify as cogs.<name>\n    \"\"\"\n    try:\n        bot.load_extension(extension_name)\n    except (AttributeError, ImportError) as e:\n        await ctx.send("```{}: {}\\n```".format(type(e).__name__, str(e)))\n\n        return\n    await ctx.send("{} loaded.".format(extension_name))\n\n\n@bot.command()\n@is_moderator()\nasync def unload(ctx, extension_name: str):\n    \"\"\"\n    Unload a specific extension. Specify as cogs.<name>\n    \"\"\"\n    try:\n        bot.unload_extension(extension_name)\n    except Exception as e:\n        await ctx.send("```{}: {}\\n```".format(type(e).__name__, str(e)))\n        return\n\n    await ctx.send("{} unloaded.".format(extension_name))\n\n\n@bot.command()\n@is_developer()\nasync def restart(ctx):\n    \"\"\"\n    Restart the bot\n    \"\"\"\n    bot.dev_logger.info('Bot restart')\n    await ctx.send('https://streamable.com/dli1')\n    python = sys.executable\n    os.execl(python, python, *sys.argv)\n\n\n@bot.command()\n@is_moderator()\nasync def sleep(ctx):\n    \"\"\"\n    Shut down the bot\n    \"\"\"\n    bot.dev_logger.info('Received sleep command. Shutting down bot')\n    await ctx.send('Bye')\n    await bot.logout()\n\n\n@bot.command()\n@is_developer()\nasync def update(ctx):\n    \"\"\"\n    Update the bot by pulling changes from the git repository\n    \"\"\"\n    bot.dev_logger.info('Update Git repository')\n    shell_output = subprocess.check_output("git pull {}".format(\n        bot.config.repository),\n                                           shell=True)\n    status_message = shell_output.decode("unicode_escape")\n    await ctx.send('`{}`'.format(status_message))\n\n\n@bot.event\nasync def on_message(message):\n    if message.author == bot.user:\n        return\n\n    key = message.content.lower()\n    if key in MARTY_RESPONSES:\n        await message.channel.send(MARTY_RESPONSES[key])\n        return\n\n    await bot.process_commands(message)\n\n\n@bot.command()\n@is_moderator()\nasync def backup(ctx):\n    \"\"\"\n    Send the current database file to the owner\n    \"\"\"\n    current_time = datetime.now(\n        tz=timezone('America/New_York')).strftime('%Y%m%d-%H:%M')\n    backup_filename = 'Martlet{}.db'.format(current_time)\n    await ctx.send(content='Here you go',\n                   file=discord.File(fp=bot.config.db_path,\n                                     filename=backup_filename))\n    bot.dev_logger.info('Database backup')\n\n\ndef main():\n    for extension in startup:\n        try:\n            bot.load_extension(extension)\n        except Exception as e:\n            bot.dev_logger.warning(f'Failed to load extension {extension}\\n'\n                                   f'{type(e).__name__}: {e}')\n    bot.run(bot.config.discord_key)\n\n\nif __name__ == "__main__":\n    main()\n""")
